const fs = require('fs');
const path = require('path');

const srcDir = path.resolve(__dirname, '../src');
const distDir = path.resolve(__dirname, '../dist');

const PUBLIC_ENV_MAPPINGS = [
  ['orchestratorUrl', ['DASHBOARD_ORCHESTRATOR_URL']],
  ['websocketUrl', ['DASHBOARD_WEBSOCKET_URL']],
  ['loggingUrl', ['DASHBOARD_LOGGING_URL']],
  ['echoUrl', ['DASHBOARD_ECHO_URL']],
  ['renderctlUrl', ['DASHBOARD_RENDERCTL_URL']],
  ['twilioBaseUrl', ['DASHBOARD_TWILIO_BASE_URL', 'TWILIO_API_BASE_URL', 'TWILIO_BASE_URL']],
  ['hubspotBaseUrl', ['DASHBOARD_HUBSPOT_BASE_URL', 'HUBSPOT_BASE_URL']],
  ['openaiBaseUrl', ['DASHBOARD_OPENAI_BASE_URL', 'OPENAI_API_BASE_URL']],
  ['googleBaseUrl', ['DASHBOARD_GOOGLE_BASE_URL', 'GOOGLE_API_BASE_URL']]
];

const SENSITIVE_ENV_NAMES = [
  'DASHBOARD_TWILIO_ACCOUNT_SID',
  'TWILIO_ACCOUNT_SID',
  'DASHBOARD_TWILIO_AUTH_TOKEN',
  'TWILIO_AUTH_TOKEN',
  'DASHBOARD_HUBSPOT_API_KEY',
  'HUBSPOT_ACCESS_TOKEN',
  'DASHBOARD_OPENAI_API_KEY',
  'OPENAI_API_KEY',
  'DASHBOARD_GOOGLE_API_KEY',
  'GOOGLE_API_KEY'
];

function copyFile(srcFile, destFile) {
  fs.mkdirSync(path.dirname(destFile), { recursive: true });
  fs.copyFileSync(srcFile, destFile);
}

function copyDir(src, dest) {
  const entries = fs.readdirSync(src, { withFileTypes: true });
  entries.forEach((entry) => {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else if (entry.isFile()) {
      copyFile(srcPath, destPath);
    }
  });
}

if (!fs.existsSync(srcDir)) {
  throw new Error(`Source directory not found: ${srcDir}`);
}

fs.rmSync(distDir, { recursive: true, force: true });
fs.mkdirSync(distDir, { recursive: true });
copyDir(srcDir, distDir);

writeRuntimeConfig();

console.log(`Dashboard build output written to ${distDir}`);

function writeRuntimeConfig() {
  const payload = {};
  const injectedNames = [];

  PUBLIC_ENV_MAPPINGS.forEach(([key, names]) => {
    const value = readFirstEnvValue(names);
    if (value) {
      payload[key] = value.value;
      injectedNames.push(value.name);
    }
  });

  const sensitiveProvided = SENSITIVE_ENV_NAMES.filter((name) => {
    const raw = process.env[name];
    return typeof raw === 'string' && raw.trim();
  });

  if (sensitiveProvided.length) {
    console.warn(
      'Skipping embedding of sensitive environment variables in dashboard bundle:',
      sensitiveProvided.join(', ')
    );
  }

  if (!Object.keys(payload).length) {
    return;
  }

  const targetFile = path.join(distDir, 'config.js');
  const contents =
    '// Auto-generated by dashboard build. Do not edit directly.\n' +
    `window.__APP_DEFAULTS__ = Object.assign({}, window.__APP_DEFAULTS__, ${JSON.stringify(payload, null, 2)});\n`;

  fs.writeFileSync(targetFile, contents);

  if (injectedNames.length) {
    console.log('Injected public runtime configuration from environment:', injectedNames.join(', '));
  }
}

function readFirstEnvValue(names) {
  for (const name of names) {
    const raw = process.env[name];
    if (typeof raw !== 'string') continue;
    const value = raw.trim();
    if (value) {
      return { name, value };
    }
  }
  return null;
}
