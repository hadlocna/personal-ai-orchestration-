const fs = require('fs');
const path = require('path');

const srcDir = path.resolve(__dirname, '../src');
const distDir = path.resolve(__dirname, '../dist');

const ENV_MAPPINGS = [
  ['twilioAccountSid', ['DASHBOARD_TWILIO_ACCOUNT_SID', 'TWILIO_ACCOUNT_SID']],
  ['twilioAuthToken', ['DASHBOARD_TWILIO_AUTH_TOKEN', 'TWILIO_AUTH_TOKEN']],
  ['hubspotApiKey', ['DASHBOARD_HUBSPOT_API_KEY', 'HUBSPOT_ACCESS_TOKEN']],
  ['openaiApiKey', ['DASHBOARD_OPENAI_API_KEY', 'OPENAI_API_KEY']],
  ['googleApiKey', ['DASHBOARD_GOOGLE_API_KEY', 'GOOGLE_API_KEY']],
  ['twilioBaseUrl', ['DASHBOARD_TWILIO_BASE_URL', 'TWILIO_API_BASE_URL', 'TWILIO_BASE_URL']],
  ['hubspotBaseUrl', ['DASHBOARD_HUBSPOT_BASE_URL', 'HUBSPOT_BASE_URL']],
  ['openaiBaseUrl', ['DASHBOARD_OPENAI_BASE_URL', 'OPENAI_API_BASE_URL']],
  ['googleBaseUrl', ['DASHBOARD_GOOGLE_BASE_URL', 'GOOGLE_API_BASE_URL']]
];

function copyFile(srcFile, destFile) {
  fs.mkdirSync(path.dirname(destFile), { recursive: true });
  fs.copyFileSync(srcFile, destFile);
}

function copyDir(src, dest) {
  const entries = fs.readdirSync(src, { withFileTypes: true });
  entries.forEach((entry) => {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else if (entry.isFile()) {
      copyFile(srcPath, destPath);
    }
  });
}

if (!fs.existsSync(srcDir)) {
  throw new Error(`Source directory not found: ${srcDir}`);
}

fs.rmSync(distDir, { recursive: true, force: true });
fs.mkdirSync(distDir, { recursive: true });
copyDir(srcDir, distDir);

writeRuntimeConfig();

console.log(`Dashboard build output written to ${distDir}`);

function writeRuntimeConfig() {
  const payload = {};

  ENV_MAPPINGS.forEach(([key, names]) => {
    for (const name of names) {
      const raw = process.env[name];
      if (typeof raw === 'string') {
        const value = raw.trim();
        if (value) {
          payload[key] = value;
          break;
        }
      }
    }
  });

  if (!Object.keys(payload).length) {
    return;
  }

  const targetFile = path.join(distDir, 'config.js');
  const contents =
    '// Auto-generated by dashboard build. Do not edit directly.\n' +
    `window.__APP_DEFAULTS__ = Object.assign({}, window.__APP_DEFAULTS__, ${JSON.stringify(payload, null, 2)});\n`;

  fs.writeFileSync(targetFile, contents);
}
